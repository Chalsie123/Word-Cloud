{"cells":[{"metadata":{},"cell_type":"markdown","source":"# Welcome to Jupyter!"},{"metadata":{"trusted":true},"cell_type":"code","source":"!pip install wordcloud\n!pip install fileupload\n!pip install ipywidgets\n!jupyter nbextension install --py --user fileupload\n!jupyter nbextension enable --py fileupload\n\nimport wordcloud\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom IPython.display import display\nimport fileupload\nimport io\nimport sys","execution_count":1,"outputs":[{"output_type":"stream","text":"Requirement already satisfied: wordcloud in /srv/conda/envs/notebook/lib/python3.6/site-packages (1.7.0)\nRequirement already satisfied: numpy>=1.6.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from wordcloud) (1.18.5)\nRequirement already satisfied: matplotlib in /srv/conda/envs/notebook/lib/python3.6/site-packages (from wordcloud) (3.2.1)\nRequirement already satisfied: pillow in /srv/conda/envs/notebook/lib/python3.6/site-packages (from wordcloud) (7.1.2)\nRequirement already satisfied: cycler>=0.10 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from matplotlib->wordcloud) (0.10.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from matplotlib->wordcloud) (1.2.0)\nRequirement already satisfied: python-dateutil>=2.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from matplotlib->wordcloud) (2.8.1)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from matplotlib->wordcloud) (2.4.7)\nRequirement already satisfied: six in /srv/conda/envs/notebook/lib/python3.6/site-packages (from cycler>=0.10->matplotlib->wordcloud) (1.15.0)\nRequirement already satisfied: fileupload in /srv/conda/envs/notebook/lib/python3.6/site-packages (0.1.5)\nRequirement already satisfied: traitlets>=4.2 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from fileupload) (4.3.3)\nRequirement already satisfied: ipywidgets>=5.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from fileupload) (7.5.1)\nRequirement already satisfied: notebook>=4.2 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from fileupload) (6.0.3)\nRequirement already satisfied: decorator in /srv/conda/envs/notebook/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (4.4.2)\nRequirement already satisfied: six in /srv/conda/envs/notebook/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (1.15.0)\nRequirement already satisfied: ipython-genutils in /srv/conda/envs/notebook/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (0.2.0)\nRequirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (7.15.0)\nRequirement already satisfied: widgetsnbextension~=3.5.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (3.5.1)\nRequirement already satisfied: ipykernel>=4.5.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (5.3.0)\nRequirement already satisfied: nbformat>=4.2.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (5.0.6)\nRequirement already satisfied: terminado>=0.8.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.8.3)\nRequirement already satisfied: jupyter-client>=5.3.4 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (6.1.3)\nRequirement already satisfied: prometheus-client in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.8.0)\nRequirement already satisfied: jupyter-core>=4.6.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (4.6.3)\nRequirement already satisfied: jinja2 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (2.11.2)\nRequirement already satisfied: tornado>=5.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (6.0.4)\nRequirement already satisfied: nbconvert in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (5.6.1)\nRequirement already satisfied: Send2Trash in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (1.5.0)\nRequirement already satisfied: pyzmq>=17 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (19.0.1)\nRequirement already satisfied: pickleshare in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.7.5)\nRequirement already satisfied: pygments in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (2.6.1)\nRequirement already satisfied: pexpect; sys_platform != \"win32\" in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (4.8.0)\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (3.0.5)\nRequirement already satisfied: setuptools>=18.5 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (47.1.1.post20200529)\nRequirement already satisfied: backcall in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.1.0)\nRequirement already satisfied: jedi>=0.10 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.17.0)\nRequirement already satisfied: jsonschema!=2.5.0,>=2.4 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets>=5.1->fileupload) (3.2.0)\nRequirement already satisfied: python-dateutil>=2.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jupyter-client>=5.3.4->notebook>=4.2->fileupload) (2.8.1)\nRequirement already satisfied: MarkupSafe>=0.23 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jinja2->notebook>=4.2->fileupload) (1.1.1)\nRequirement already satisfied: defusedxml in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.6.0)\nRequirement already satisfied: testpath in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.4.4)\nRequirement already satisfied: bleach in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (3.1.5)\nRequirement already satisfied: pandocfilters>=1.4.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (1.4.2)\nRequirement already satisfied: entrypoints>=0.2.2 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.3)\nRequirement already satisfied: mistune<2,>=0.8.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.8.4)\nRequirement already satisfied: ptyprocess>=0.5 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from pexpect; sys_platform != \"win32\"->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.6.0)\nRequirement already satisfied: wcwidth in /srv/conda/envs/notebook/lib/python3.6/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.2.3)\nRequirement already satisfied: parso>=0.7.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.7.0)\nRequirement already satisfied: attrs>=17.4.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets>=5.1->fileupload) (19.3.0)\nRequirement already satisfied: importlib-metadata; python_version < \"3.8\" in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets>=5.1->fileupload) (1.6.0)\nRequirement already satisfied: pyrsistent>=0.14.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets>=5.1->fileupload) (0.16.0)\nRequirement already satisfied: webencodings in /srv/conda/envs/notebook/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.2->fileupload) (0.5.1)\nRequirement already satisfied: packaging in /srv/conda/envs/notebook/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.2->fileupload) (20.4)\nRequirement already satisfied: zipp>=0.5 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from importlib-metadata; python_version < \"3.8\"->jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets>=5.1->fileupload) (3.1.0)\nRequirement already satisfied: pyparsing>=2.0.2 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from packaging->bleach->nbconvert->notebook>=4.2->fileupload) (2.4.7)\n","name":"stdout"},{"output_type":"stream","text":"Requirement already satisfied: ipywidgets in /srv/conda/envs/notebook/lib/python3.6/site-packages (7.5.1)\nRequirement already satisfied: traitlets>=4.3.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipywidgets) (4.3.3)\nRequirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipywidgets) (7.15.0)\nRequirement already satisfied: nbformat>=4.2.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipywidgets) (5.0.6)\nRequirement already satisfied: ipykernel>=4.5.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipywidgets) (5.3.0)\nRequirement already satisfied: widgetsnbextension~=3.5.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipywidgets) (3.5.1)\nRequirement already satisfied: six in /srv/conda/envs/notebook/lib/python3.6/site-packages (from traitlets>=4.3.1->ipywidgets) (1.15.0)\nRequirement already satisfied: ipython-genutils in /srv/conda/envs/notebook/lib/python3.6/site-packages (from traitlets>=4.3.1->ipywidgets) (0.2.0)\nRequirement already satisfied: decorator in /srv/conda/envs/notebook/lib/python3.6/site-packages (from traitlets>=4.3.1->ipywidgets) (4.4.2)\nRequirement already satisfied: pexpect; sys_platform != \"win32\" in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (4.8.0)\nRequirement already satisfied: pickleshare in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.7.5)\nRequirement already satisfied: pygments in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (2.6.1)\nRequirement already satisfied: setuptools>=18.5 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (47.1.1.post20200529)\nRequirement already satisfied: backcall in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.1.0)\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (3.0.5)\nRequirement already satisfied: jedi>=0.10 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.17.0)\nRequirement already satisfied: jupyter-core in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets) (4.6.3)\nRequirement already satisfied: jsonschema!=2.5.0,>=2.4 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets) (3.2.0)\nRequirement already satisfied: jupyter-client in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipykernel>=4.5.1->ipywidgets) (6.1.3)\nRequirement already satisfied: tornado>=4.2 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from ipykernel>=4.5.1->ipywidgets) (6.0.4)\nRequirement already satisfied: notebook>=4.4.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from widgetsnbextension~=3.5.0->ipywidgets) (6.0.3)\nRequirement already satisfied: ptyprocess>=0.5 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from pexpect; sys_platform != \"win32\"->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.6.0)\nRequirement already satisfied: wcwidth in /srv/conda/envs/notebook/lib/python3.6/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.2.3)\nRequirement already satisfied: parso>=0.7.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.7.0)\nRequirement already satisfied: attrs>=17.4.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (19.3.0)\nRequirement already satisfied: importlib-metadata; python_version < \"3.8\" in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (1.6.0)\nRequirement already satisfied: pyrsistent>=0.14.0 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (0.16.0)\nRequirement already satisfied: pyzmq>=13 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets) (19.0.1)\nRequirement already satisfied: python-dateutil>=2.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets) (2.8.1)\nRequirement already satisfied: nbconvert in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (5.6.1)\nRequirement already satisfied: Send2Trash in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (1.5.0)\nRequirement already satisfied: prometheus-client in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (0.8.0)\nRequirement already satisfied: terminado>=0.8.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (0.8.3)\nRequirement already satisfied: jinja2 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (2.11.2)\nRequirement already satisfied: zipp>=0.5 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from importlib-metadata; python_version < \"3.8\"->jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (3.1.0)\nRequirement already satisfied: mistune<2,>=0.8.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (0.8.4)\nRequirement already satisfied: entrypoints>=0.2.2 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (0.3)\nRequirement already satisfied: defusedxml in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (0.6.0)\nRequirement already satisfied: testpath in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (0.4.4)\nRequirement already satisfied: pandocfilters>=1.4.1 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (1.4.2)\nRequirement already satisfied: bleach in /srv/conda/envs/notebook/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (3.1.5)\nRequirement already satisfied: MarkupSafe>=0.23 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from jinja2->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (1.1.1)\nRequirement already satisfied: webencodings in /srv/conda/envs/notebook/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (0.5.1)\nRequirement already satisfied: packaging in /srv/conda/envs/notebook/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (20.4)\nRequirement already satisfied: pyparsing>=2.0.2 in /srv/conda/envs/notebook/lib/python3.6/site-packages (from packaging->bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets) (2.4.7)\nInstalling /srv/conda/envs/notebook/lib/python3.6/site-packages/fileupload/static -> fileupload\nUp to date: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/extension.js\nUp to date: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/widget.js\nUp to date: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/fileupload/widget.js\n- Validating: \u001b[32mOK\u001b[0m\n\n    To initialize this nbextension in the browser every time the notebook (or other app) loads:\n    \n          jupyter nbextension enable fileupload --user --py\n    \nEnabling notebook extension fileupload/extension...\n      - Validating: \u001b[32mOK\u001b[0m\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"\ndef _upload():\n\n    _upload_widget = fileupload.FileUploadWidget()\n\n    def _cb(change):\n        global file_contents\n        decoded = io.StringIO(change['owner'].data.decode('utf-8'))\n        filename = change['owner'].filename\n        print('Uploaded `{}` ({:.2f} kB)'.format(\n            filename, len(decoded.read()) / 2 **10))\n        file_contents = decoded.getvalue()\n\n    _upload_widget.observe(_cb, names='data')\n    display(_upload_widget)\n\n_upload() ","execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":"FileUploadWidget(label='Browse', _dom_classes=('widget_item', 'btn-group'))","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f96354ef518942558243c8e1595b5811"}},"metadata":{}},{"output_type":"stream","text":"Uploaded `01 READ ME FIRST !!!!.txt` (0.33 kB)\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"def calculate_frequencies(file_contents):\n    # Here is a list of punctuations and uninteresting words you can use to process your text\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    uninteresting_words = [\"the\", \"a\", \"to\", \"if\", \"is\", \"it\", \"of\", \"and\", \"or\", \"an\", \"as\", \"i\", \"me\", \"my\", \\\n    \"we\", \"our\", \"ours\", \"you\", \"your\", \"yours\", \"he\", \"she\", \"him\", \"his\", \"her\", \"hers\", \"its\", \"they\", \"them\", \\\n    \"their\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"am\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \\\n    \"have\", \"has\", \"had\", \"do\", \"does\", \"did\", \"but\", \"at\", \"by\", \"with\", \"from\", \"here\", \"when\", \"where\", \"how\", \\\n    \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"some\", \"such\", \"no\", \"nor\", \"too\", \"very\", \"can\", \"will\", \"just\"]\n    \n    # LEARNER CODE START HERE\n    non_punctuation_text=\"\"\n    for char in file_contents:\n        if char not in punctuations:\n            non_punctuation_text=non_punctuation_text+char\n    words=non_punctuation_text.split()\n    clean_words=[]\n    frequencies={}\n    for word in words:\n        if word.isalpha():\n            if word not in uninteresting_words:\n                clean_words.append(word)\n    for alpha_word in clean_words:\n        if alpha_word not in frequencies:\n            frequencies[alpha_word]=1\n        else:\n            frequencies[alpha_word]+=1\n    \n    #wordcloud\n    cloud = wordcloud.WordCloud()\n    cloud.generate_from_frequencies(frequencies)\n    return cloud.to_array()","execution_count":5,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"myimage = calculate_frequencies(file_contents)\nplt.imshow(myimage, interpolation = 'nearest')\nplt.axis('off')\nplt.show()","execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.6.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":2}